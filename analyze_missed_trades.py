import pandas as pd
import os
import argparse
import sys

# --- CONFIGURATION ---
DATA_FOLDER_DAILY = 'data/processed/daily'
# For this non-compounding analysis, we assume a fixed hypothetical position size for each trade
HYPOTHETICAL_POSITION_SIZE = 100000 

def run_missed_trade_analysis(log_file_path):
    """
    Analyzes a log of missed trades to determine their potential performance.
    """
    if not os.path.exists(log_file_path):
        print(f"Error: Log file not found at '{log_file_path}'")
        return

    try:
        # First, read the CSV without parsing dates to inspect its columns
        missed_trades_df = pd.read_csv(log_file_path)
        
        # --- NEW: Column Validation ---
        required_columns = ['symbol', 'entry_date', 'entry_price', 'initial_stop_loss', 'target']
        if not all(col in missed_trades_df.columns for col in required_columns):
            print("\n--- Input File Error ---")
            print("Error: The provided log file is missing one or more required columns.")
            print(f"Required columns are: {required_columns}")
            print(f"Columns found in file: {missed_trades_df.columns.tolist()}")
            print("Please ensure you are using a 'missed_trades_log.csv' file generated by the latest version of the backtester.")
            print("------------------------\n")
            return
            
        # Now that we've validated the columns, we can safely parse the dates
        missed_trades_df['entry_date'] = pd.to_datetime(missed_trades_df['entry_date'])
        
        print(f"Loaded {len(missed_trades_df)} missed trades from '{log_file_path}'")
    except Exception as e:
        print(f"Error reading or processing log file: {e}")
        return

    stock_data_daily = {}
    results = []

    print("Loading daily data for analysis...")
    for symbol in missed_trades_df['symbol'].unique():
        file_path = os.path.join(DATA_FOLDER_DAILY, f"{symbol}_daily_with_indicators.csv")
        if os.path.exists(file_path):
            df = pd.read_csv(file_path, index_col=0, parse_dates=True)
            df.columns = [col.lower() for col in df.columns]
            stock_data_daily[symbol] = df
        else:
            print(f"Warning: Daily data for {symbol} not found. Trades for this symbol will be skipped.")

    print("Simulating missed trades...")
    for index, trade in missed_trades_df.iterrows():
        symbol = trade['symbol']
        if symbol not in stock_data_daily:
            continue

        df = stock_data_daily[symbol]
        
        # Slice the dataframe from the entry date onwards
        trade_period_df = df[df.index >= trade['entry_date']]
        if trade_period_df.empty:
            continue

        entry_price = trade['entry_price']
        stop_loss = trade['initial_stop_loss']
        target = trade['target']
        
        # Non-compounding: calculate shares based on a fixed hypothetical size
        shares = HYPOTHETICAL_POSITION_SIZE // entry_price
        if shares == 0: continue

        partial_exit_done = False
        
        # Simulate the trade day by day
        for day_index, row in trade_period_df.iterrows():
            exit_type = None
            pnl = 0
            
            # Check for partial profit
            if not partial_exit_done and row['high'] >= target:
                pnl = (target - entry_price) * (shares / 2)
                results.append({'pnl': pnl, 'exit_type': 'Partial Profit (1:1)'})
                
                # Remaining position is now managed with a new stop at breakeven
                shares /= 2
                stop_loss = entry_price
                partial_exit_done = True

            # Check for stop loss
            if row['low'] <= stop_loss:
                pnl = (stop_loss - entry_price) * shares
                results.append({'pnl': pnl, 'exit_type': 'Stop-Loss'})
                break # Trade is over

            # Trail the stop
            if row['close'] > entry_price:
                stop_loss = max(stop_loss, entry_price)
                if row['close'] > row['open']: # Green candle
                    stop_loss = max(stop_loss, row['low'])
    
    if not results:
        print("\nNo valid missed trades could be simulated.")
        return

    # --- Analyze and Print Results ---
    results_df = pd.DataFrame(results)
    winning_trades = results_df[results_df['pnl'] > 0]
    losing_trades = results_df[results_df['pnl'] <= 0]
    
    total_events = len(results_df)
    win_rate = (len(winning_trades) / total_events) * 100 if total_events > 0 else 0
    total_pnl = results_df['pnl'].sum()
    
    print("\n--- MISSED TRADES ANALYSIS REPORT ---")
    print("=====================================")
    print(f"Total Missed Trade Events Simulated: {total_events}")
    print(f"Potential Win Rate: {win_rate:.2f}%")
    print(f"Total Potential P&L (non-compounded, based on fixed position size): {total_pnl:,.2f}")
    print("=====================================")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Analyze the performance of missed trades from a log file.")
    parser.add_argument(
        '--file',
        type=str,
        required=True,
        help='The path to the missed trades log CSV file generated by the backtester.'
    )
    args = parser.parse_args()
    run_missed_trade_analysis(args.file)
