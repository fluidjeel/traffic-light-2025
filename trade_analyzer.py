# trade_analyzer.py
#
# Description:
# A script to perform a deep, quantitative analysis of the rich trade logs
# generated by the portfolio backtester.
#
# v3 Update:
# - Re-integrated the comprehensive, multi-indicator analysis to ensure the tool
#   can be used to fine-tune all strategy parameters (Volume, RSI, EMA, etc.).
# - The changes are now fully additive, combining the original deep-dive
#   capabilities with the new VIX-based missed entry analysis.
#
# How to Use:
# 1. Run the daily_long_breakout.py script. Ensure it logs all necessary
#    indicator values (e.g., 'rsi_at_entry') for the analysis to be complete.
# 2. Run this script. It will automatically find and analyze the latest logs.

import pandas as pd
import os
import glob
import numpy as np

def analyze_trades(log_file_path, summary_file_path, missed_log_path):
    """
    Analyzes trade log files and prints a detailed performance summary.
    """
    # --- Display Configuration ---
    if os.path.exists(summary_file_path):
        print("\n" + "="*80)
        print("BACKTEST CONFIGURATION FOR THIS ANALYSIS")
        print("="*80)
        with open(summary_file_path, 'r') as f:
            config_text = f.read().split('Trade Statistics:')[0]
            print(config_text)
    else:
        print(f"Warning: Corresponding summary file not found at {summary_file_path}")


    if os.path.exists(log_file_path):
        print(f"\n--- Analyzing Executed Trades: {os.path.basename(log_file_path)} ---")
        df = pd.read_csv(log_file_path)
    else:
        print("Trade log for executed trades not found. Skipping analysis.")
        df = pd.DataFrame() # Create empty dataframe to avoid errors
    
    if not df.empty:
        # --- RESTORED: Full Quantitative Deep Dive ---
        print("\n" + "="*80)
        print("QUANTITATIVE DEEP DIVE: PERFORMANCE OF EXECUTED TRADES BY INDICATOR")
        print("="*80)

        # List of all indicators we want to analyze from the trade log
        indicators_to_analyze = [
            'vix_at_entry',
            'rsi_at_entry', 
            'volume_ratio_at_entry', 
            'close_to_ema_dist_pct_at_entry'
        ]

        for indicator in indicators_to_analyze:
            if indicator not in df.columns:
                print(f"\n--- Analysis for '{indicator}' skipped: Column not found in trade log. ---")
                continue

            print(f"\n--- Performance by {indicator.replace('_', ' ').title()} ---")
            
            # Define bins and labels for each indicator
            if indicator == 'vix_at_entry':
                bins = [0, 15, 22, 100]
                labels = ['Low VIX (<15)', 'Medium VIX (15-22)', 'High VIX (>22)']
            elif indicator == 'rsi_at_entry':
                bins = [0, 40, 60, 70, 100]
                labels = ['RSI < 40', 'RSI 40-60', 'RSI 60-70', 'RSI > 70']
            elif indicator == 'volume_ratio_at_entry':
                bins = [0, 1, 1.5, 2.5, 100]
                labels = ['Low Vol (<1x)', 'Avg Vol (1-1.5x)', 'High Vol (1.5-2.5x)', 'Surge Vol (>2.5x)']
            elif indicator == 'close_to_ema_dist_pct_at_entry':
                bins = [-100, 0, 2, 5, 10, 100]
                labels = ['<0%', '0-2%', '2-5%', '5-10%', '>10%']
            else:
                continue # Skip if no binning strategy is defined
            
            df['bucket'] = pd.cut(df[indicator], bins=bins, labels=labels, right=False)
            
            analysis = df.groupby('bucket', observed=False).agg(
                total_trades=('pnl', 'count'),
                win_rate=('pnl', lambda x: (x > 0).sum() / x.count() * 100 if x.count() > 0 else 0),
                net_pnl=('pnl', 'sum'),
                avg_pnl_per_trade=('pnl', 'mean')
            ).reset_index()
            print(analysis.round(2))
        
        print("\nINSIGHT: For this analysis to be complete, ensure the backtester logs all required")
        print("         indicator values (e.g., 'rsi_at_entry') into the 'all_trades.csv' file.")

    # --- Analysis of Missed Entries ---
    if os.path.exists(missed_log_path):
        print("\n" + "="*80)
        print("DATA-DRIVEN RISK ANALYSIS: MISSED ENTRIES BY VIX BUCKET")
        print("="*80)
        
        missed_df = pd.read_csv(missed_log_path)
        entry_misses = missed_df[missed_df['stage'] == 'Entry'].copy()

        if not entry_misses.empty and 'vix' in entry_misses.columns:
            bins = [0, 15, 22, 100]
            labels = ['Low VIX (<15)', 'Medium VIX (15-22)', 'High VIX (>22)']
            entry_misses['vix_bucket'] = pd.cut(entry_misses['vix'], bins=bins, labels=labels, right=False)

            missed_analysis = entry_misses.groupby('vix_bucket', observed=False).agg(
                missed_entries=('symbol', 'count')
            ).reset_index()

            print("\nTotal Entries Missed Due to Portfolio Constraints (Capital/Position Limit):")
            print(missed_analysis)
            
            print("\nINSIGHT: This is the key data for refining your dynamic risk.")
            print("If a high number of entries are missed in the 'High VIX' bucket, it implies that the strategy")
            print("identifies many setups during volatility, but our risk model is too conservative to act on them.")
            print("This would be strong evidence to INCREASE risk during high VIX periods.")

        else:
            print("No 'Entry' stage misses found or VIX data is missing in the missed trades log.")
    else:
        print("\nMissed trades log not found. To enable this analysis, ensure 'log_missed_trades' is True in the backtester config.")

    print("\n" + "="*80)


def main():
    """
    Finds the latest trade log and runs the analysis.
    """
    log_root_folder = 'backtest_logs'
    if not os.path.exists(log_root_folder):
        print(f"Error: Log directory '{log_root_folder}' not found. Please run a backtest first.")
        return

    all_timestamped_runs = []
    strategy_folders = [os.path.join(log_root_folder, d) for d in os.listdir(log_root_folder) if os.path.isdir(os.path.join(log_root_folder, d))]

    for folder in strategy_folders:
        timestamp_folders = [os.path.join(folder, d) for d in os.listdir(folder) if os.path.isdir(os.path.join(folder, d))]
        all_timestamped_runs.extend(timestamp_folders)

    if not all_timestamped_runs:
        print("No backtest run folders found in the log directory.")
        return
    
    latest_run_folder = max(all_timestamped_runs, key=os.path.getmtime)
    
    trade_log_search = os.path.join(latest_run_folder, '*_all_trades.csv')
    summary_search = os.path.join(latest_run_folder, '*_summary.txt')
    missed_search = os.path.join(latest_run_folder, '*_missed_trades.csv')
    
    trade_logs = glob.glob(trade_log_search)
    summary_files = glob.glob(summary_search)
    missed_logs = glob.glob(missed_search)

    if not trade_logs and not missed_logs:
        print(f"Error: No trade logs or missed trade logs found in the latest run folder: '{latest_run_folder}'")
        return
        
    trade_log_file = trade_logs[0] if trade_logs else ""
    summary_file = summary_files[0] if summary_files else ""
    missed_log_file = missed_logs[0] if missed_logs else ""
    
    analyze_trades(trade_log_file, summary_file, missed_log_file)


if __name__ == "__main__":
    main()
