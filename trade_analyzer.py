# trade_analyzer.py (Enhanced & Corrected)
#
# Description:
# A script to perform a deep, quantitative analysis of the rich trade logs
# generated by the candle_breakout_simulator (v29+). It provides a statistical
# breakdown of various indicators for winning vs. losing trades and analyzes
# the setups that were filtered out by the strategy's rules. This version adds
# more robust metrics like Profit Factor and Payoff Ratio.
#
# How to Use:
# 1. Run the candle_breakout_simulator.py (v29 or later) to generate a new backtest log.
# 2. Run this script. It will automatically find and analyze the latest trade log.

import pandas as pd
import os
import glob
import numpy as np

def analyze_trades(log_file_path, summary_file_path, filtered_log_path):
    """
    Analyzes trade log files and prints a detailed performance summary.
    """
    if not os.path.exists(log_file_path):
        print(f"Error: Trade log file not found at '{log_file_path}'")
        return

    # --- Display Configuration ---
    if os.path.exists(summary_file_path):
        print("\n" + "="*60)
        print("BACKTEST CONFIGURATION FOR THIS ANALYSIS")
        print("="*60)
        with open(summary_file_path, 'r') as f:
            for line in f:
                if "UNIVERSE BACKTEST SUMMARY" in line:
                    break
                print(line.strip())
    else:
        print(f"Warning: Corresponding summary file not found at {summary_file_path}")


    print(f"\n--- Analyzing Trade Log: {os.path.basename(log_file_path)} ---")
    
    df = pd.read_csv(log_file_path)
    
    if df.empty:
        print("The trade log is empty. No trades to analyze.")
        return

    # --- ADDED: Advanced Performance Metrics ---
    print("\n" + "="*60)
    print("ADVANCED PERFORMANCE METRICS (IGNORING BREAKEVEN TRADES)")
    print("="*60)
    
    winners = df[df['pnl'] > 0]
    losers = df[df['pnl'] <= 0]

    if not winners.empty and not losers.empty:
        gross_profit = winners['pnl'].sum()
        gross_loss = abs(losers['pnl'].sum())
        
        profit_factor = gross_profit / gross_loss if gross_loss > 0 else np.inf
        
        avg_win = winners['pnl'].mean()
        avg_loss = abs(losers['pnl'].mean())
        
        payoff_ratio = avg_win / avg_loss if avg_loss > 0 else np.inf

        print(f"Profit Factor (Gross Win / Gross Loss): {profit_factor:.2f}")
        print(f"Payoff Ratio (Avg Win / Avg Loss): {payoff_ratio:.2f}")
        print(f"Average Winning Trade: {avg_win:,.2f}")
        print(f"Average Losing Trade: {avg_loss:,.2f}")

        print("\nINSIGHT: A Profit Factor > 1.75 and a Payoff Ratio > 2.0 are generally considered strong for a trend-following system.")

    else:
        print("Not enough winning or losing trades to calculate advanced metrics.")


    # --- Quantitative Analysis of Executed Trades ---
    print("\n" + "="*60)
    print("QUANTITATIVE DEEP DIVE: PERFORMANCE BY INDICATOR BUCKET")
    print("="*60)

    indicators_to_analyze = [
        'vix_on_entry', 
        'rsi_on_entry', 
        'volume_ratio_on_entry', 
        'close_to_ema_ratio'
    ]

    for indicator in indicators_to_analyze:
        if indicator not in df.columns:
            continue

        print(f"\n--- Performance by {indicator.replace('_', ' ').title()} ---")
        
        if indicator == 'vix_on_entry':
            bins = [0, 15, 20, 25, 30, 100]
            labels = ['VIX < 15', 'VIX 15-20', 'VIX 20-25', 'VIX 25-30', 'VIX > 30']
        elif indicator == 'rsi_on_entry':
            bins = [0, 30, 40, 50, 60, 70, 100]
            labels = ['RSI < 30', 'RSI 30-40', 'RSI 40-50', 'RSI 50-60', 'RSI 60-70', 'RSI > 70']
        elif indicator == 'volume_ratio_on_entry':
            bins = [0, 0.75, 1.25, 2, 100]
            labels = ['Low Vol', 'Avg Vol', 'High Vol', 'Surge Vol']
        elif indicator == 'close_to_ema_ratio':
            bins = [-100, -5, -1, 1, 5, 100]
            labels = ['<-5%', '-5% to -1%', '-1% to 1%', '1% to 5%', '>5%']
        
        df['bucket'] = pd.cut(df[indicator], bins=bins, labels=labels, right=False)
        
        analysis = df.groupby('bucket', observed=False).agg(
            total_trades=('pnl', 'count'),
            win_rate=('pnl', lambda x: (x > 0).sum() / x.count() * 100 if x.count() > 0 else 0),
            net_pnl=('pnl', 'sum')
        ).reset_index()
        print(analysis.round(2))

    # --- Analysis of Filtered Setups ---
    if os.path.exists(filtered_log_path):
        print("\n" + "="*60)
        print("ANALYSIS OF FILTERED (REJECTED) TRADES")
        print("="*60)
        
        filtered_df = pd.read_csv(filtered_log_path)
        if not filtered_df.empty:
            rejection_counts = filtered_df['filter_reason'].value_counts()
            print("\nNumber of Setups Rejected by Each Filter:")
            print(rejection_counts)

            existing_indicators = [col for col in indicators_to_analyze if col in filtered_df.columns]
            if existing_indicators:
                print("\nAverage Indicator Values for Rejected Setups:")
                avg_filtered_indicators = filtered_df.groupby('filter_reason')[existing_indicators].mean()
                print(avg_filtered_indicators.round(2))
                
                print("\nINSIGHT: Compare the average indicators of rejected trades to the profitable buckets above.")
                print("For example, if the 'Volume' filter is rejecting many trades with high RSI, you might be filtering out good setups.")
            else:
                print("\nNo indicator data was logged for filtered setups to analyze.")
        else:
            print("No filtered setups were logged.")
    else:
        print("\nFiltered setups log not found. To enable this analysis, set 'log_filtered_setups' to True in the backtester config.")

    print("\n" + "="*60)


def main():
    """
    Finds the latest trade log and runs the analysis.
    """
    log_root_folder = 'backtest_logs'
    if not os.path.exists(log_root_folder):
        print(f"Error: Log directory '{log_root_folder}' not found. Please run a backtest first.")
        return

    all_timestamped_runs = []
    strategy_folders = [os.path.join(log_root_folder, d) for d in os.listdir(log_root_folder) if os.path.isdir(os.path.join(log_root_folder, d))]

    for folder in strategy_folders:
        timestamp_folders = [os.path.join(folder, d) for d in os.listdir(folder) if os.path.isdir(os.path.join(folder, d))]
        all_timestamped_runs.extend(timestamp_folders)

    if not all_timestamped_runs:
        print("No backtest run folders found in the log directory.")
        return
    
    latest_run_folder = max(all_timestamped_runs, key=os.path.getmtime)
    
    trade_log_search = os.path.join(latest_run_folder, '*_all_trades.csv')
    summary_search = os.path.join(latest_run_folder, '*_summary.txt')
    filtered_search = os.path.join(latest_run_folder, '*_filtered_setups.csv')
    
    trade_logs = glob.glob(trade_log_search)
    summary_files = glob.glob(summary_search)
    filtered_logs = glob.glob(filtered_search)

    if not trade_logs:
        print(f"Error: No '*_all_trades.csv' file found in the latest run folder: '{latest_run_folder}'")
        return
        
    summary_file = summary_files[0] if summary_files else ""
    filtered_log_file = filtered_logs[0] if filtered_logs else ""
    
    analyze_trades(trade_logs[0], summary_file, filtered_log_file)


if __name__ == "__main__":
    main()
