# trade_analyzer.py
#
# Description:
# A script to perform a deep, quantitative analysis of the rich trade logs
# generated by the portfolio backtester.
#
# v4 Update (Risk Cap Efficacy Analysis):
# - Added a new section to analyze the quality of trades that were specifically
#   rejected by the portfolio risk cap.
# - This provides a direct, data-driven way to evaluate if the risk cap is
#   helping or hurting performance by showing the characteristics of the
#   setups it forces the strategy to miss.

import pandas as pd
import os
import glob
import numpy as np

def analyze_trades(log_file_path, summary_file_path, missed_log_path):
    """
    Analyzes trade log files and prints a detailed performance summary.
    """
    # --- Display Configuration ---
    if os.path.exists(summary_file_path):
        print("\n" + "="*80)
        print("BACKTEST CONFIGURATION FOR THIS ANALYSIS")
        print("="*80)
        with open(summary_file_path, 'r') as f:
            # Read until the performance summary starts
            config_text = ""
            for line in f:
                if "PERFORMANCE SUMMARY" in line:
                    break
                config_text += line
            print(config_text)
    else:
        print(f"Warning: Corresponding summary file not found at {summary_file_path}")


    if os.path.exists(log_file_path):
        print(f"\n--- Analyzing Executed Trades: {os.path.basename(log_file_path)} ---")
        df = pd.read_csv(log_file_path)
    else:
        print("Trade log for executed trades not found. Skipping analysis.")
        df = pd.DataFrame()
    
    if not df.empty:
        # --- Full Quantitative Deep Dive ---
        print("\n" + "="*80)
        print("QUANTITATIVE DEEP DIVE: PERFORMANCE OF EXECUTED TRADES BY INDICATOR")
        print("="*80)

        indicators_to_analyze = [
            'vix_at_entry', 'rsi_at_entry', 
            'volume_ratio_at_entry', 'close_to_ema_dist_pct_at_entry'
        ]

        for indicator in indicators_to_analyze:
            if indicator not in df.columns:
                print(f"\n--- Analysis for '{indicator}' skipped: Column not found in trade log. ---")
                continue

            print(f"\n--- Performance by {indicator.replace('_', ' ').title()} ---")
            
            if indicator == 'vix_at_entry':
                bins = [0, 15, 22, 100]
                labels = ['Low VIX (<15)', 'Medium VIX (15-22)', 'High VIX (>22)']
            elif indicator == 'rsi_at_entry':
                bins = [0, 40, 60, 70, 100]
                labels = ['RSI < 40', 'RSI 40-60', 'RSI 60-70', 'RSI > 70']
            elif indicator == 'volume_ratio_at_entry':
                bins = [0, 1.5, 2.5, 100]
                labels = ['High Vol (1.5-2.5x)', 'Surge Vol (>2.5x)', 'Extreme Vol (>10x)']
            elif indicator == 'close_to_ema_dist_pct_at_entry':
                bins = [-100, 0, 2, 5, 10, 100]
                labels = ['<0%', '0-2%', '2-5%', '5-10%', '>10%']
            else:
                continue
            
            df['bucket'] = pd.cut(df[indicator], bins=bins, labels=labels, right=False)
            
            analysis = df.groupby('bucket', observed=False).agg(
                total_trades=('pnl', 'count'),
                win_rate=('pnl', lambda x: (x > 0).sum() / x.count() * 100 if x.count() > 0 else 0),
                net_pnl=('pnl', 'sum'),
                avg_pnl_per_trade=('pnl', 'mean')
            ).reset_index()
            print(analysis.round(2))

    # --- Analysis of Missed Entries ---
    if os.path.exists(missed_log_path):
        missed_df = pd.read_csv(missed_log_path)
        
        # --- NEW: Specific Analysis for Risk Cap Rejections ---
        risk_cap_misses = missed_df[missed_df['reason'] == 'Entry Rejected: Max portfolio risk cap would be exceeded'].copy()

        if not risk_cap_misses.empty:
            print("\n" + "="*80)
            print("ANALYSIS OF TRADES MISSED DUE TO PORTFOLIO RISK CAP")
            print("="*80)
            
            print(f"Total Trades Missed due to Risk Cap: {len(risk_cap_misses)}")
            
            # Calculate and print average indicator values for these specific missed trades
            avg_indicators = risk_cap_misses[['rsi', 'volume_ratio', 'ema_dist_pct']].mean()
            print("\nAverage Indicator Values of Missed Trades:")
            print(avg_indicators.round(2))

            print("\nINSIGHT: This is the key data for evaluating the risk cap.")
            print("Compare these averages to the profitable buckets in the 'Executed Trades' analysis above.")
            print("If the average RSI of missed trades is low (<50) and the volume ratio is high (>2.0),")
            print("it's a strong sign the risk cap is blocking high-quality, high-conviction setups.")
        else:
            print("\nNo trades were missed due to the portfolio risk cap in this run.")

    else:
        print("\nMissed trades log not found.")

    print("\n" + "="*80)


def main():
    """
    Finds the latest trade log and runs the analysis.
    """
    log_root_folder = 'backtest_logs'
    if not os.path.exists(log_root_folder):
        print(f"Error: Log directory '{log_root_folder}' not found. Please run a backtest first.")
        return

    all_timestamped_runs = []
    strategy_folders = [os.path.join(log_root_folder, d) for d in os.listdir(log_root_folder) if os.path.isdir(os.path.join(log_root_folder, d))]

    for folder in strategy_folders:
        timestamp_folders = [os.path.join(folder, d) for d in os.listdir(folder) if os.path.isdir(os.path.join(folder, d))]
        all_timestamped_runs.extend(timestamp_folders)

    if not all_timestamped_runs:
        print("No backtest run folders found in the log directory.")
        return
    
    latest_run_folder = max(all_timestamped_runs, key=os.path.getmtime)
    
    trade_log_search = os.path.join(latest_run_folder, '*_all_trades.csv')
    summary_search = os.path.join(latest_run_folder, '*_summary.txt')
    missed_search = os.path.join(latest_run_folder, '*_missed_trades.csv')
    
    trade_logs = glob.glob(trade_log_search)
    summary_files = glob.glob(summary_search)
    missed_logs = glob.glob(missed_search)

    if not trade_logs and not missed_logs:
        print(f"Error: No trade logs or missed trade logs found in the latest run folder: '{latest_run_folder}'")
        return
        
    trade_log_file = trade_logs[0] if trade_logs else ""
    summary_file = summary_files[0] if summary_files else ""
    missed_log_file = missed_logs[0] if missed_logs else ""
    
    analyze_trades(trade_log_file, summary_file, missed_log_file)


if __name__ == "__main__":
    main()
