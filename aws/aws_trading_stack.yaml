AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Provisions the complete serverless infrastructure for the automated Fyers trading strategy,
  including S3 storage, IAM roles, Lambda functions, and event triggers.

Parameters:
  S3BucketName:
    Type: String
    Description: A globally unique name for the S3 bucket that will store all trading data. (e.g., my-trading-strategy-data-12345)
  NotificationEmail:
    Type: String
    Description: The email address to receive trade execution summaries and error alerts.
  ExecutionMode:
    Type: String
    Description: "Set the execution mode. 'PAPER' for simulated trading, 'LIVE' for real trades."
    Default: PAPER
    AllowedValues:
      - PAPER
      - LIVE

Resources:
  # ------------------------------------------------------------
  # 1. IAM Role for Lambda Functions
  # ------------------------------------------------------------
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FyersTradingLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FyersTradingLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                Resource:
                  - !Ref FyersCredentialsSecret
                  - !Ref FyersAccessTokenSecret
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt SignalGenerationLambda.Arn
                  - !GetAtt OrderExecutionLambda.Arn
                  - !GetAtt JournalingLambda.Arn
                  - !GetAtt PaperTradeJournalingLambda.Arn # Added permission

  # ------------------------------------------------------------
  # 2. S3 Bucket for Data Storage
  # ------------------------------------------------------------
  TradingDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName

  # ------------------------------------------------------------
  # 3. Secrets Manager for Credentials
  # ------------------------------------------------------------
  FyersCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: FyersCredentialsSecret
      Description: Stores the Fyers API Client ID, Secret Key, Username, PIN, and TOTP secret.
      SecretString: '{ "client_id": "YOUR_CLIENT_ID", "secret_key": "YOUR_SECRET_KEY", "username": "YOUR_FYERS_ID", "pin": "YOUR_PIN", "totp_secret": "YOUR_TOTP_SECRET" }'

  FyersAccessTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: FyersAccessTokenSecret
      Description: Stores the dynamically generated Fyers access token.
      SecretString: '{ "access_token": "placeholder" }'

  # ------------------------------------------------------------
  # 4. SNS for Notifications
  # ------------------------------------------------------------
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TradingStrategyNotifications
      TopicName: TradingStrategyNotifications
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: email

  # ------------------------------------------------------------
  # 5. Lambda Functions
  # ------------------------------------------------------------
  AuthenticationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Authentication_Lambda
      Handler: authentication_lambda_automated.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'lambda_code/authentication_lambda.zip'
      Environment:
        Variables:
          FYERS_CREDENTIALS_SECRET_NAME: !Ref FyersCredentialsSecret
          TOKEN_SECRET_NAME: !Ref FyersAccessTokenSecret
          FYERS_REDIRECT_URI: "YOUR_REDIRECT_URI"

  DataPipelineLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Data_Pipeline_Lambda
      Handler: data_pipeline_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'lambda_code/data_pipeline_lambda.zip'
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          TOKEN_SECRET_NAME: !Ref FyersAccessTokenSecret
          FYERS_CLIENT_ID: "YOUR_CLIENT_ID"
          NIFTY_LIST_KEY: "nifty200.csv"
      EventInvokeConfig:
        OnSuccess:
          Destination: !GetAtt SignalGenerationLambda.Arn

  SignalGenerationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Signal_Generation_Lambda
      Handler: signal_generation_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'lambda_code/signal_generation_lambda.zip'
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          NIFTY_LIST_KEY: "nifty200.csv"
          TRADE_PLAN_KEY: "trade_plan.json"

  OrderExecutionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Order_Execution_Lambda
      Handler: trade_execution_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 120
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'lambda_code/order_execution_lambda.zip'
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          TOKEN_SECRET_NAME: !Ref FyersAccessTokenSecret
          FYERS_CLIENT_ID: "YOUR_CLIENT_ID"
          SNS_TOPIC_ARN: !Ref NotificationTopic
          EXECUTION_MODE: !Ref ExecutionMode

  JournalingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Journaling_Lambda
      Handler: journaling_lambda.handler # Placeholder
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'lambda_code/journaling_lambda.zip'
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic
          
  # --- NEW: Paper Trade Journaling Lambda ---
  PaperTradeJournalingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Paper_Trade_Journaling_Lambda
      Handler: paper_trade_journaling_lambda.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: 'lambda_code/paper_trade_journaling_lambda.zip'
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          SNS_TOPIC_ARN: !Ref NotificationTopic

  # ------------------------------------------------------------
  # 6. Event Triggers
  # ------------------------------------------------------------
  AuthenticationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: DailyFyersAuthentication
      Description: "Triggers the Authentication Lambda daily before market open"
      ScheduleExpression: "cron(0 2 * * ? *)" # 7:30 AM IST
      State: ENABLED
      Targets:
        - Arn: !GetAtt AuthenticationLambda.Arn
          Id: "AuthenticationLambdaTarget"

  DataPipelineSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: DailyDataPipeline
      Description: "Triggers the Data Pipeline Lambda daily after market close"
      ScheduleExpression: "cron(30 12 * * ? *)" # 6:00 PM IST
      State: ENABLED
      Targets:
        - Arn: !GetAtt DataPipelineLambda.Arn
          Id: "DataPipelineLambdaTarget"

  # --- NEW: Paper Trade Journaling Schedule ---
  PaperTradeJournalingSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: DailyPaperTradeJournaling
      Description: "Triggers the Paper Trading Journaling Lambda daily after market close"
      ScheduleExpression: "cron(0 12 * * ? *)" # 5:30 PM IST (before data pipeline)
      State: ENABLED
      Targets:
        - Arn: !GetAtt PaperTradeJournalingLambda.Arn
          Id: "PaperTradeJournalingLambdaTarget"

  OrderExecutionTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt OrderExecutionLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt TradingDataBucket.Arn
      
  OrderExecutionS3Trigger:
    Type: AWS::S3::BucketNotificationConfiguration
    Properties:
      Bucket: !Ref TradingDataBucket
      LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt OrderExecutionLambda.Arn
          Filter:
            S3Key:
              Rules:
                - Name: prefix
                  Value: 'trade_plan.json'

Outputs:
  S3Bucket:
    Description: "Name of the S3 bucket for trading data."
    Value: !Ref TradingDataBucket
  NotificationTopicARN:
    Description: "ARN of the SNS topic for notifications."
    Value: !Ref NotificationTopic
