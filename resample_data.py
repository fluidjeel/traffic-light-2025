# resample_data.py
#
# Description:
# This script reads the daily historical data files generated by the
# 'fyers_equity_scraper.py' script and converts them into weekly and
# monthly data files.
#
# How to use:
# 1. First, run 'fyers_equity_scraper.py' to download the daily data.
#    This will create a 'historical_data' folder.
# 2. Then, run this script. It will create two new folders:
#    - 'weekly_data': containing the resampled weekly data.
#    - 'monthly_data': containing the resampled monthly data.

import os
import pandas as pd

def resample_historical_data():
    """
    Reads daily data, resamples it to weekly and monthly timeframes,
    and saves the results to new directories.
    """
    # Define input and output directories
    input_dir = "historical_data"
    weekly_output_dir = "weekly_data"
    monthly_output_dir = "monthly_data"

    # Create output directories if they don't exist
    os.makedirs(weekly_output_dir, exist_ok=True)
    os.makedirs(monthly_output_dir, exist_ok=True)

    # Check if the input directory exists
    if not os.path.isdir(input_dir):
        print(f"Error: Input directory '{input_dir}' not found.")
        print("Please run the 'fyers_equity_scraper.py' script first to download the daily data.")
        return

    # Get a list of all daily data files
    try:
        daily_files = [f for f in os.listdir(input_dir) if f.endswith('_daily.csv')]
    except Exception as e:
        print(f"Error reading from input directory '{input_dir}': {e}")
        return

    if not daily_files:
        print(f"No daily data files found in '{input_dir}'.")
        return

    total_files = len(daily_files)
    print(f"Found {total_files} daily data files to process.")

    # Loop through each file and process it
    for i, filename in enumerate(daily_files):
        symbol_name = filename.replace('_daily.csv', '')
        print(f"\nProcessing {symbol_name} ({i+1}/{total_files})...")
        
        try:
            # Construct full file path
            file_path = os.path.join(input_dir, filename)
            
            # Read the daily data into a DataFrame
            daily_df = pd.read_csv(file_path, index_col='datetime', parse_dates=True)

            # Define the resampling logic
            ohlc_logic = {
                'open': 'first',
                'high': 'max',
                'low': 'min',
                'close': 'last',
                'volume': 'sum'
            }

            # --- Resample to Weekly Data ---
            weekly_df = daily_df.resample('W').apply(ohlc_logic).dropna()
            if not weekly_df.empty:
                weekly_output_path = os.path.join(weekly_output_dir, f"{symbol_name}_weekly.csv")
                weekly_df.to_csv(weekly_output_path)
                print(f"  > Success: Saved weekly data to {weekly_output_path}")
            else:
                print("  > Info: No weekly data to save.")


            # --- Resample to Monthly Data ---
            # 'MS' ensures the timestamp is the start of the month
            monthly_df = daily_df.resample('MS').apply(ohlc_logic).dropna()
            if not monthly_df.empty:
                monthly_output_path = os.path.join(monthly_output_dir, f"{symbol_name}_monthly.csv")
                monthly_df.to_csv(monthly_output_path)
                print(f"  > Success: Saved monthly data to {monthly_output_path}")
            else:
                print("  > Info: No monthly data to save.")

        except Exception as e:
            print(f"  > Error processing {filename}: {e}")

    print("\n--- Resampling complete! ---")

if __name__ == "__main__":
    resample_historical_data()
